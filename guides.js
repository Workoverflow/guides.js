// Generated by CoffeeScript 1.6.1
var GridSystem;

GridSystem = (function() {

  GridSystem.prototype.options = {
    grid: {
      align: "center",
      colors: {
        major: "rgba(0, 131, 255, 0.5)",
        minor: "rgba(0,0,0,0.2)",
        gutter: "rgba(52, 141, 190, 0.2)"
      },
      x: {
        major: 240,
        minor: 60,
        gutter: 20
      },
      y: {
        major: 80,
        minor: 20,
        gutter: 0
      }
    }
  };

  function GridSystem(gridOptions) {
    if (gridOptions == null) {
      gridOptions = {};
    }
    $.extend(this.options.grid, gridOptions);
    this.show();
  }

  GridSystem.prototype.show = function() {
    if (!this.canvas) {
      this._createCanvas();
    }
    this.canvas.style.display = "block";
    return this.canvas.style['z-index'] = 9999;
  };

  GridSystem.prototype.hide = function() {
    this.canvas.style.display = "none";
    return this.canvas.style['z-index'] = -1;
  };

  GridSystem.prototype.toggle = function() {
    if (this.canvas.style.display !== "block") {
      return this.show();
    } else {
      return this.hide();
    }
  };

  GridSystem.prototype.update = function() {
    console.log("updating");
    this.canvas.width = window.innerWidth;
    this.canvas.height = Math.max(document.body.scrollHeight, window.innerHeight);
    return this._drawGridlines();
  };

  GridSystem.prototype._drawGridlines = function() {
    var context;
    context = this.canvas.getContext('2d');
    context.strokeStyle = this.options.grid.colors.gutter;
    if (this.options.grid.x.gutter > 0) {
      context.lineWidth = this.options.grid.x.gutter;
      this._drawGrid(context, this.options.grid.x.major, 0);
    }
    if (this.options.grid.y.gutter > 0) {
      context.lineWidth = this.options.grid.y.gutter;
      this._drawGrid(context, 0, this.options.grid.y.major);
    }
    context.strokeStyle = this.options.grid.colors.minor;
    context.lineWidth = 1;
    this._drawGrid(context, this.options.grid.x.minor, this.options.grid.y.minor);
    context.strokeStyle = this.options.grid.colors.major;
    context.lineWidth = 1;
    return this._drawGrid(context, this.options.grid.x.major, this.options.grid.y.major);
  };

  GridSystem.prototype._drawGrid = function(context, xUnit, yUnit) {
    var left, top, _results;
    left = 0;
    top = 0;
    if (this.options.grid.align === 'center') {
      left = this.canvas.width / 2 % xUnit;
    }
    if (yUnit > 0) {
      while (top < this.canvas.height) {
        context.beginPath();
        context.moveTo(0, top);
        context.lineTo(this.canvas.width, top);
        context.stroke();
        top += yUnit;
      }
    }
    if (xUnit > 0) {
      _results = [];
      while (left < this.canvas.width) {
        context.beginPath();
        context.moveTo(left, 0);
        context.lineTo(left, this.canvas.height);
        context.stroke();
        _results.push(left += xUnit);
      }
      return _results;
    }
  };

  GridSystem.prototype._createCanvas = function() {
    var _this = this;
    this.canvas = document.createElement("canvas");
    this.canvas.className = "guides";
    this.canvas.style.position = "absolute";
    this.canvas.style.margin = 0;
    this.canvas.style.top = 0;
    this.canvas.style.left = 0;
    this.update();
    document.body.appendChild(this.canvas);
    return $(window).resize(function() {
      return _this.update();
    });
  };

  return GridSystem;

})();
